package interfaces;
import java.io.Serializable;

/**
 * 1.Интерфейс - это контракт , он только описывает что должен уметь делать обьект,
 * но не описывает как он должен что-то делать. Интерфесы не хранять состояние обьекта.
 * Абстрактные классы наоборот могут содержать реализацию а так же хранить состояние обьекта.
 * При этом тут следует сделать оговорку - интерфейсы тоже могут содержать реализацию по умолчанию,
 * но это возможность была добавлена только для обратной совместимости, что бы не нарушать работу
 * программ, использующих интерфейс.
 *
 *
 * 2.Все пооля обявленные в интерфейсе являються public static final,
 * а в абстрактном классе можно обьявлять любые переменные.
 *
 *
 * 3. В Java можно наследоваться только от одного класса, а интерфейсов можно реализовать сколько угодно.
 *
 *
 * 4.Абстрактные классы создают свзязь между классами, близкими по функционалу и назанчению.
 * Интерфейсы могут реализовать никак не связаннве между собой классы.
 *
 *
 * 5.Что бы реализовать интерфейс используеться ключевое слово implements,
 * что бы наследоваться от абстрактного класса - extends
 *
 * 
 * 6. интерфейсы так же могут наследоваться от других интерфейсов,
 * и причем через ключевое слово @extends
 */
@FunctionalInterface
public interface Flyable extends Serializable {

    /**
     * Так же все переменные, поля или переменные экземпляра которые обьявляются,
     * являються статическими, не изменными по умолчанию: public static final ,
     * то есть оно являеться константой
     */
    int SPEED = 8; //public static final


    /**
     * Функциональный интерфейс должен содержать только один абстрактный метод,
     * этот метод абстрактный по умолчанию
     * <p>
     * Что бы добавить дополнительные методы, они должны быть помечены
     * ключевым словом - default : {@link #turnLeft()}
     * либо static : {@link #turnLeft()}
     */
    void fly(); // abstract void fly();


    /**
     * Этот метод привязан к самому интерфейсу, по этому мы не можем переопределить его,
     * то есть мы не можем обращаться к этому методу через обьект этого интерфейса,
     * а только через имя интерфейса, пример смотри в {@link Main#testTurnLeft()}
     */
    static void turnLeft() {
        System.out.println("Turn Left!");
    }

    /**
     * По желанию мы даже можем переопределить этот метод.
     * Пример смотри в {@link Main#testTurnRight()}
     */
    default void turnRight() {
        System.out.println("Turn Left!");
    }
}


